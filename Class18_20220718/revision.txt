0. JavaScript:
* iekš hmtl (iekš head, body - iekš <script> tagiem)
* atsevišķā lokālā failā
* atsevišķā ārējā failā (kkur tīklā)
+ scopes - fragmentiem, piemēram, funkcijai - {}
+ JS programmēšanas valodas teikumi parasti beidzās ar ";"
** Browser + Inspect + Console (Ctrl+L, notīrīšana) + Source + Debug

1. Variables (mainīgie)
*  var, let, const - nosaka pielietošanas reģionu
* primitīvie datu tipi (Number, String, Boolean,..)
* daudzas dažādas matemātiskās, loģiskās (||, &&, ..), bitu (|, &, >, ..) utt operācijas

2. Array (masīvi)
* viens_vaards[daudzi indeksēti elementi vai vērtības]
* daudzas dažādas metodes attiecībā uz šo elementu kopu - pievienot, izdzēst, izbīdīt, iebīdīt,
iestarpināt, izkopēt, apvienot,..
** String - simbolu masīvs
    "static text 1" + variable_value_or_operationa_result + "static text 2";
    `static text 1 ${variable_value_or_operationa_result} statix text 2`

3.1 If (koda izpildes zarošana)
+ else
+ izšķiršanas par vēlamo turpmāk izmantojamo vērtību vai darāmo darbību ar konstrukciju -
(nosacījums) ? true_vērtība/darbība : false_vērtība/darbība;

3.2 Switch (koda izpildes zarošana, ja ir daudz plašāka nākamā zara izvēle)
+ break;
+ default;

4. Loops (cikli)
+ for( ; ; ){}
+ while (){}
+ do {} while ()
++ for (current_element of array) - (of value) iterēšanai gara masīva ciklam, lai secīgi izrīkotos ar visiem masīva elementiem - satur vērtību
++ for (current_element in array) - (in index) satur elementa indeksu (secība - 0; 1; 2;..)
++ for (current_property of object) - isn't possible! - script is not iterable!
++ for (current_property in object) - current_property contains property name

5. Functions (funkcijas)
+ function function_name(function_arguments){function_body} - definition with statement
+ const[/var/let] function_name = function(function_arguments){function_body} - definition with expression
++                                function function_entire_for_recursion(function_arguments){function_body}
+++ functions defined by expression (pieteiktas ar izteiksmi) can't be hoisted - nevar tikt izmantotas pirms definēšanas(apraksta)
++++ pārlūku iebūvētās funkcijas

6. Objects (objekti)
+ properties (īpašības) - object_name.object_property_name
                        - object_name["object_property_name"]
+ methods (funkcijas)
+ this (Window, object, HTML elementu notikuma gadījumā (element in case of event))
++ objekta definēšanas ar liteŗāļa palīdzību:
    const object_name = {};
    const object_name = new Object();
++ objekta definēšanas ar atslēgas vārda NEW pielietošanu:
    object_name.object_property_name = object_property_value;
++ Object.defineProperty(object_name, "object_property_name",{
    value: ..,
    writable: true/false,
    enumerable: true/false,
    configurable: true/false,
    })
++ Object.values(object_name) --> array with values of properties and descriptions of methods
    (masīvs ar īpašību vērtībām un metožu aprakstiem; apakšobjektiem to nedarīs)
++ JSON.stringify(object_name) --> symbol string with stringified property names and thei values (liek pēdiņās datus)
    (NB! in output objects)
++ object_name.object_method_name.call(other_object_name);
++ other_object_name.other_object_method_name = object_name.object_method_name.bind(other_object_name);
+++ pārlūku iebūvēti objekti (Wondow,console)

